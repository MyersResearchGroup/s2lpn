// 6811.inst
// regD = regA:regB
// memory storage is high order byte first, 
//  i.e. STD foo => foo:=regA and foo+1:=regB
// This version maintains regA and regB as independent variables,
// splicing them when necessary to generate regD.  In addition, 
// variables accessed by 16 bit loads are assumed to have two 
// halves, i.e foo and foo_p_1.  foo_p_1 is the low order byte.
// 
// 0xFF00=65280
//delimiters
#,+\t-\ []
//merge code
NO_TRANS

////////////////////LOAD INSTRUCTIONS//////////////////////////
//immediate
LDAA
#@1
@1 BOUND -128 255
#b ccrN ccrV ccrZ
#i regA
NO_BRANCH
@next
{}
[1,1]
<
regA:=(@1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//immediate
LDAA
#-@1
@1 BOUND -128 255
#b ccrN ccrV ccrZ
#i regA
NO_BRANCH
@next
{}
[1,1]
<
regA:=(-@1%256)
#b ccrN:=BIT(-@1,7)
#b ccrZ:=((-@1%256)=0)
#b ccrV:=FALSE
>

//immediate
LDAB
#@1
@1 BOUND -128 255
#b ccrN ccrV ccrZ
#i regB
NO_BRANCH
@next
{}
[1,1]
<
regB:=(@1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//immediate
LDAB
#-@1
@1 BOUND -128 255
#b ccrN ccrV ccrZ
#i regB
NO_BRANCH
@next
{}
[1,1]
<
regB:=(-@1%256)
#b ccrN:=BIT(-@1,7)
#b ccrZ:=((-@1%256)=0)
#b ccrV:=FALSE
>

//immediate
LDD
#@1
#b ccrN ccrV ccrZ 
#i regA regB @1 
NO_BRANCH
@next
{}
[3,3]
<
regA:=(and(@1,65280)/256)%256
regB:=@1%256
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDD
#-@1
#b ccrN ccrV ccrZ 
#i regA regB  
NO_BRANCH
@next
{}
[3,3]
<
regA:=-((and(@1,65280)/256)%256)
regB:=-@1%256
#b ccrN:=BIT(-@1,15)
#b ccrZ:=((-@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDS
#@1
#b ccrN ccrV ccrZ 
#i regSP @1
NO_BRANCH
@next
{}
[3,3]
<
regSP:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDX
#@1
#b ccrN ccrV ccrZ 
#i regX @1
NO_BRANCH
@next
{}
[3,3]
<
regX:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDY
#@1
#b ccrN ccrV ccrZ 
#i regY @1
NO_BRANCH
@next
{}
[3,3]
<
regY:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDY
#-@1
#b ccrN ccrV ccrZ 
#i regY  
NO_BRANCH
@next
{}
[3,3]
<
regY:=(-@1%65536)
#b ccrN:=BIT(-@1,15)
#b ccrZ:=((-@1%65536)=0)
#b ccrV:=FALSE
>

//extended
LDAA
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult 
#b adc_cd adc_cc adc_cb adc_ca
#i regA
NO_BRANCH
@next
{}
[4,4]
<
regA:=(adc_ccf*128)+(adc_scan*32)+(adc_mult*16)+(adc_cd*8)+(adc_cc*4)+(adc_cb*2)+(adc_ca)
#b ccrN:=adc_ccf
#b ccrZ:=~adc_ccf&~adc_scan&~adc_mult&~adc_cd&~adc_cc&~adc_cb&~adc_ca
#b ccrV:=FALSE
>

//extended
LDAB
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult 
#b adc_cd adc_cc adc_cb adc_ca
#i regB
NO_BRANCH
@next
{}
[4,4]
<
regB:=(adc_ccf*128)+(adc_scan*32)+(adc_mult*16)+(adc_cd*8)+(adc_cc*4)+(adc_cb*2)+(adc_ca)
#b ccrN:=adc_ccf
#b ccrZ:=~adc_ccf&~adc_scan&~adc_mult&~adc_cd&~adc_cc&~adc_cb&~adc_ca
#b ccrV:=FALSE
>

//extended
LDAA
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ
#i regA @1 
NO_BRANCH
@next
{}
[4,4]
<
regA:=(@1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//extended
LDAB
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ
#i regB @1 
NO_BRANCH
@next
{}
[4,4]
<
regB:=(@1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//extended
LDAB
@1+1
@1 BOUND 0 255
#b ccrN ccrV ccrZ
#i regB @1_p_1 
NO_BRANCH
@next
{}
[4,4]
<
regB:=(@1_p_1%256)
#b ccrN:=BIT(@1_p_1,7)
#b ccrZ:=((@1_p_1%256)=0)
#b ccrV:=FALSE
>

//extended
LDD
@1
#b ccrN ccrV ccrZ 
#i regD @1 @1_p_1
NO_BRANCH
@next
{}
[5,5]
<
regA:=@1%256
regB:=@1_p_1%256
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)&((@1_p_1%256)=0)
#b ccrV:=FALSE
>

//extended
LDX
@1
#b ccrN ccrV ccrZ 
#i regX @1_p_1 @1
NO_BRANCH
@next
{}
[5,5]
<
regX:=(@1%256)*256+(@1_p_1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)&((@1_p_1%256)=0)
#b ccrV:=FALSE
>

//extended
LDY
@1
#b ccrN ccrV ccrZ 
#i regY @1 @1_p_1
NO_BRANCH
@next
{}
[5,5]
<
regY:=(@1%256)*256+(@1_p_1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)&((@1_p_1%256)=0)
#b ccrV:=FALSE
>

//register X indirect
LDAA
@1,x
#b ccrN ccrV ccrZ MEM_READ 
#i regA regX MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_READ:=true
MEM_ADDR:=regX+@1
>
{~MEM_READ}
[0,0]
<
regA:=(MEM_DATA%256)
#b ccrN:=BIT(MEM_DATA,7)
#b ccrZ:=((MEM_DATA%256)=0)
#b ccrV:=FALSE
>

//register X indirect
LDAB
@1,x
#b ccrN ccrV ccrZ MEM_READ 
#i regB regX MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_READ:=true
MEM_ADDR:=regX+@1
>
{~MEM_READ}
[0,0]
<
regB:=(MEM_DATA%256)
#b ccrN:=BIT(MEM_DATA,7)
#b ccrZ:=((MEM_DATA%256)=0)
#b ccrV:=FALSE
>

//register X indirect
LDX
@1,x
#b ccrN ccrV ccrZ MEM_READ
#i regX ld_TMP MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_READ:=true
MEM_ADDR:=regX+@1
>
{~MEM_READ}
[0,0]
<
ldTMP:=MEM_DATA
>
{}
[1,1]
<
#b MEM_READ:=true
MEM_ADDR:=regX+@1+1
>
{~MEM_READ}
[0,0]
<
regX:=(MEM_DATA)*256+ld_TMP
#b ccrN:=BIT(MEM_DATA,7)
#b ccrZ:=(MEM_DATA=0)&(ld_TMP=0)
#b ccrV:=FALSE
>


////////////////////STORE INSTRUCTIONS//////////////////////////
//extended
STAA
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult adc_start
#b adc_cd adc_cc adc_cb adc_ca
#i regA
NO_BRANCH
@next
{}
[4,4]
<
#b adc_ccf:=false
#b adc_scan:=BIT(regA,5)
#b adc_mult:=BIT(regA,4)
#b adc_cd:=BIT(regA,3)
#b adc_cc:=BIT(regA,2)
#b adc_cb:=BIT(regA,1)
#b adc_ca:=BIT(regA,0)
#b ccrN:=BIT(regA,7)
#b ccrZ:=(regA=0)
#b ccrV:=FALSE
#b adc_start:=true
>

//extended
STAB
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult adc_start
#b adc_cd adc_cc adc_cb adc_ca
#i regB
NO_BRANCH
@next
{}
[4,4]
<
#b adc_ccf:=false
#b adc_scan:=BIT(regB,5)
#b adc_mult:=BIT(regB,4)
#b adc_cd:=BIT(regB,3)
#b adc_cc:=BIT(regB,2)
#b adc_cb:=BIT(regB,1)
#b adc_ca:=BIT(regB,0)
#b ccrN:=BIT(regB,7)
#b ccrZ:=(regB=0)
#b ccrV:=FALSE
#b adc_start:=true
>

//extended
STAA
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ 
#i regA @1 
NO_BRANCH
@next
{}
[4,4]
<
@1:=regA
#b ccrN:=BIT(regA,7)
#b ccrZ:=(regA=0)
#b ccrV:=FALSE
>

//extended
STAB
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ 
#i regB @1 
NO_BRANCH
@next
{}
[4,4]
<
@1:=regB
#b ccrN:=BIT(regB,7)
#b ccrZ:=(regB=0)
#b ccrV:=FALSE
>

//extended; lower byte of 16-bit variable
STAB
@1+1
@1 BOUND 0 255
#b ccrN ccrV ccrZ 
#i regB @1_p_1 
NO_BRANCH
@next
{}
[4,4]
<
@1_p_1:=regB
#b ccrN:=BIT(regB,7)
#b ccrZ:=(regB=0)
#b ccrV:=FALSE
>

//extended
STD
@1
#b ccrN ccrV ccrZ 
#i regA regB @1 @1_p_1
NO_BRANCH
@next
{}
[5,5]
<
@1:=regA
@1_p_1:=regB
#b ccrN:=BIT(regA,7)
#b ccrZ:=(regA=0)&(regB=0)
#b ccrV:=FALSE
>

//extended
STX
@1
#b ccrN ccrV ccrZ 
#i regX @1 @1_p_1
NO_BRANCH
@next
{}
[5,5]
<
@1:=regX/256
@1_p_1:=regX%256
#b ccrN:=BIT(regX,15)
#b ccrZ:=(regX=0)
#b ccrV:=FALSE
>

//extended
STY
@1
#b ccrN ccrV ccrZ 
#i regY @1 @1_p_1
NO_BRANCH
@next
{}
[6,6]
<
@1:=and(regY,65280)/256
@1_p_1:=regY%256
#b ccrN:=BIT(regY,15)
#b ccrZ:=(regY=0)
#b ccrV:=FALSE
>

//register X indirect
STAA
@1,x
@1 BOUND 0 255
#b ccrN ccrV ccrZ MEM_WRITE
#i regA regX @1 MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_WRITE:=true
MEM_ADDR:=regX+@1
MEM_DATA:=regA
#b ccrN:=BIT(regA,7)
#b ccrZ:=(regA=0)
#b ccrV:=FALSE
>

//register X indirect
STAB
@1,x
@1 BOUND 0 255
#b ccrN ccrV ccrZ MEM_WRITE
#i regB regX @1 MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_WRITE:=true
MEM_ADDR:=regX+@1
MEM_DATA:=regB
#b ccrN:=BIT(regB,7)
#b ccrZ:=(regB=0)
#b ccrV:=FALSE
>

//register X indirect
STD
@1,x
@1 BOUND 0 255
#b ccrN ccrV ccrZ MEM_WRITE
#i regA regB regX @1 MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_WRITE:=true
MEM_ADDR:=regX+@1
MEM_DATA:=regA
>
{}
[1,1]
<
#b MEM_WRITE:=true
MEM_ADDR:=regX+@1+1
MEM_DATA:=regB
#b ccrN:=BIT(regA,7)
#b ccrZ:=(regA=0)&(regB=0)
#b ccrV:=FALSE
>

////////////////////ARITHMETIC INSTRUCTIONS//////////////////////////

//inherent
ABX

#i regX regB
NO_BRANCH
@next
{}
[3,3]
<
regX:=(regX+regB)%65536
>

//inherent
ABY

#i regY regB
NO_BRANCH
@next
{}
[4,4]
<
regY:=(regY+regB)%65536
>

//immediate
ADDA
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regA
NO_BRANCH
@next
{}
[2,2]
<
regA:=(regA+@1+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA+@1+256)%256,7))|(BIT((regA+@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((@1+regA+256)%256,7)
#b ccrZ:=(((@1+regA+256)%256)=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA+@1+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA+@1+256)%256,7))
>

//immediate
ADDA
#-@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regA
NO_BRANCH
@next
{}
[2,2]
<
regA:=(regA-@1+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(-@1,7))|(BIT(-@1,7)&BIT((regA-@1+256)%256,7))|(BIT((regA-@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((-@1+regA+256)%256,7)
#b ccrZ:=(((-@1+regA+256)%256)=0)
#b ccrV:=(BIT(regA,7)&~BIT(-@1,7)&~BIT((regA-@1+256)%256,7))|(~BIT(regA,7)&BIT(-@1,7)&BIT((regA-@1+256)%256,7))
>

//immediate
ADDB
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regB
NO_BRANCH
@next
{}
[2,2]
<
regB:=(regB+@1+256)%256
#b ccrC:=(~BIT(regB,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regB+@1+256)%256,7))|(BIT((regB+@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((@1+regB+256)%256,7)
#b ccrZ:=(((@1+regB+256)%256)=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1,7)&~BIT((regB+@1+256)%256,7))|(~BIT(regB,7)&BIT(@1,7)&BIT((regB+@1+256)%256,7))
>

//immediate
ADDB
#-@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regB
NO_BRANCH
@next
{}
[2,2]
<
regB:=(regB-@1+256)%256
#b ccrC:=(~BIT(regB,7)&BIT(-@1,7))|(BIT(-@1,7)&BIT((regB-@1+256)%256,7))|(BIT((regB-@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((-@1+regB+256)%256,7)
#b ccrZ:=(((-@1+regB+256)%256)=0)
#b ccrV:=(BIT(regB,7)&~BIT(-@1,7)&~BIT((regB-@1+256)%256,7))|(~BIT(regB,7)&BIT(-@1,7)&BIT((regB-@1+256)%256,7))
>

//immediate
ADDD
#@1
#b ccrC ccrN ccrV ccrZ
#i regA regB
NO_BRANCH
@next
{}
[4,4]
<
regB:=(regB+(@1%256)+256)%256
regA:=(regA+and(@1,65280)/256+(~BIT(regB,7)&BIT(@1%256,7))|(BIT(@1%256,7)&BIT((regB+@1%256+256)%256,7))|(BIT((regB+@1%256+256)%256,7)&~BIT(regB,7))+256)%256
#b ccrC:=(~BIT(((regA*256)+regB),15)&BIT(@1,15))|(BIT(@1,15)&BIT((((regA*256)+regB)+@1+65536)%65536,15))|(BIT((((regA*256)+regB)+@1+65536)%65536,15)&~BIT(((regA*256)+regB),15))
#b ccrN:=BIT((((regA*256)+regB)+@1+65536)%65536,15)
#b ccrZ:=(((@1+(regA*256)+regB)%65536)=0)
#b ccrV:=(BIT(((regA*256)+regB),15)&~BIT(@1,15)&~BIT((((regA*256)+regB)+@1+65536)%65536,15))|(~BIT(((regA*256)+regB),15)&BIT(@1,15)&BIT((((regA*256)+regB)+@1+65536)%65536,15))
>

//immediate
ADDD
#-@1
#b ccrC ccrN ccrV ccrZ
#i regA regB
NO_BRANCH
@next
{}
[4,4]
<
regB:=(regB+(-@1%256)+256)%256
regA:=(regA-and(@1,65280)/256+(~BIT(regB,7)&BIT(-@1%256,7))|(BIT(-@1%256,7)&BIT((regB-@1%256+256)%256,7))|(BIT((regB-@1%256+256)%256,7)&~BIT(regB,7))+256)%256
#b ccrC:=(~BIT(((regA*256)+regB),15)&BIT(-@1,15))|(BIT(-@1,15)&BIT((((regA*256)+regB)-@1+65536)%65536,15))|(BIT((((regA*256)+regB)-@1+65536)%65536,15)&~BIT(((regA*256)+regB),15))
#b ccrN:=BIT((((regA*256)+regB)-@1+65536)%65536,15)
#b ccrZ:=(((-@1+(regA*256)+regB)%65536)=0)
#b ccrV:=(BIT(((regA*256)+regB),15)&~BIT(-@1,15)&~BIT((((regA*256)+regB)-@1+65536)%65536,15))|(~BIT(((regA*256)+regB),15)&BIT(-@1,15)&BIT((((regA*256)+regB)-@1+65536)%65536,15))
>

//extended
ADDA
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regA @1
NO_BRANCH
@next
{}
[4,4]
<
regA:=(regA+@1+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA+@1+256)%256,7))|(BIT((regA+@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((@1+regA+256)%256,7)
#b ccrZ:=(((@1+regA+256)%256)=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA+@1+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA+@1+256)%256,7))
>

//extended
ADDA
@1+1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regA @1_p_1
NO_BRANCH
@next
{}
[4,4]
<
regA:=(regA+@1_p_1+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(@1_p_1,7))|(BIT(@1_p_1,7)&BIT((regA+@1_p_1+256)%256,7))|(BIT((regA+@1_p_1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((@1_p_1+regA+256)%256,7)
#b ccrZ:=(((@1_p_1+regA+256)%256)=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1_p_1,7)&~BIT((regA+@1_p_1+256)%256,7))|(~BIT(regA,7)&BIT(@1_p_1,7)&BIT((regA+@1_p_1+256)%256,7))
>

//extended
ADDB
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regB @1
NO_BRANCH
@next
{}
[4,4]
<
regB:=(regB+@1+256)%256
#b ccrC:=(~BIT(regB,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regB+@1+256)%256,7))|(BIT((regB+@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((@1+regB+256)%256,7)
#b ccrZ:=(((@1+regB+256)%256)=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1,7)&~BIT((regB+@1+256)%256,7))|(~BIT(regB,7)&BIT(@1,7)&BIT((regB+@1+256)%256,7))
>

//extended
ADDB
@1+1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ 
#i regB @1_p_1
NO_BRANCH
@next
{}
[4,4]
<
regB:=(regB+@1_p_1+256)%256
#b ccrC:=(~BIT(regB,7)&BIT(@1_p_1,7))|(BIT(@1_p_1,7)&BIT((regB+@1_p_1+256)%256,7))|(BIT((regB+@1_p_1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((@1_p_1+regB+256)%256,7)
#b ccrZ:=(((@1_p_1+regB+256)%256)=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1_p_1,7)&~BIT((regB+@1_p_1+256)%256,7))|(~BIT(regB,7)&BIT(@1_p_1,7)&BIT((regB+@1_p_1+256)%256,7))
>

//extended
ADDD
@1
#b ccrC ccrN ccrV ccrZ
#i regA regB @1 @1_p_1
NO_BRANCH
@next
{}
[6,6]
<
regB:=(regB+@1_p_1+256)%256
regA:=(regA+@1+(~BIT(regB,7)&BIT(@1_p_1,7))|(BIT(@1_p_1,7)&BIT((regB+@1_p_1+256)%256,7))|(BIT((regB+@1_p_1+256)%256,7)&~BIT(regB,7))+256)%256
#b ccrC:=(~BIT(((regA*256)+regB),15)&BIT((@1*256)+@1_p_1,15))|(BIT((@1*256)+@1_p_1,15)&BIT((((regA*256)+regB)+(@1*256)+@1_p_1+65536)%65536,15))|(BIT((((regA*256)+regB)+(@1*256)+@1_p_1+65536)%65536,15)&~BIT(((regA*256)+regB),15))
#b ccrN:=BIT((((regA*256)+regB)+(@1*256)+@1_p_1+65536)%65536,15)
#b ccrZ:=((((@1*256)+@1_p_1+(regA*256)+regB)%65536)=0)
#b ccrV:=(BIT(((regA*256)+regB),15)&~BIT((@1*256)+@1_p_1,15)&~BIT((((regA*256)+regB)+(@1*256)+@1_p_1+65536)%65536,15))|(~BIT(((regA*256)+regB),15)&BIT((@1*256)+@1_p_1,15)&BIT((((regA*256)+regB)+(@1*256)+@1_p_1+65536)%65536,15))
>

//immediate
ADCA
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ ccrH
#i regA
NO_BRANCH
@next
{}
[2,2]
<
regA:=((regA+@1+ccrC+256)%256)
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA+@1+ccrC+256)%256,7))|(BIT((regA+@1+ccrC+256)%256,7)&~BIT(regA,7))
#b ccrH:=(~BIT(regA,3)&BIT(@1,3))|(BIT(@1,3)&BIT((regA+@1+ccrC+256)%256,3))|(BIT((regA+@1+ccrC+256)%256,3)&~BIT(regA,3))
#b ccrN:=BIT((@1+ccrC+regA+256)%256,7)
#b ccrZ:=(((@1+ccrC+regA+256)%256)=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA+@1+ccrC+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA+@1+ccrC+256)%256,7))
>

//inherent
CLRA

#i regA
NO_BRANCH
@next
{}
[2,2]
<
regA:=0
#b ccrN:=FALSE
#b ccrZ:=TRUE
#b ccrV:=FALSE
#b ccrC:=FALSE
>

//inherent
CLRB

#i regB
NO_BRANCH
@next
{}
[2,2]
<
regB:=0
#b ccrN:=FALSE
#b ccrZ:=TRUE
#b ccrV:=FALSE
#b ccrC:=FALSE
>

//EXTENDED
CLR
@1
#i @1
NO_BRANCH
@next
{}
[6,6]
<
@1:=0
#b ccrN:=FALSE
#b ccrZ:=TRUE
#b ccrV:=FALSE
#b ccrC:=FALSE
>

//EXTENDED
CLR
@1+1
#i @1_p_1
NO_BRANCH
@next
{}
[6,6]
<
@1_p_1:=0
#b ccrN:=FALSE
#b ccrZ:=TRUE
#b ccrV:=FALSE
#b ccrC:=FALSE
>

//register X indirect
CLR
@1,x
@1 BOUND 0 255
#b ccrN ccrV ccrZ MEM_WRITE
#i regX @1 MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_WRITE:=true
MEM_ADDR:=regX+@1
MEM_DATA:=0
#b ccrN:=FALSE
#b ccrZ:=TRUE
#b ccrV:=FALSE
#b ccrC:=FALSE
>

//immediate
CMPA
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA
NO_BRANCH
@next
{}
[2,2]
<
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA-@1+256)%256,7))|(BIT((regA-@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((regA-@1+256)%256,7)
#b ccrZ:=((regA-@1+256)%256=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA-@1+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA-@1+256)%256,7))
>

//extended
CMPA
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA @1
NO_BRANCH
@next
{}
[4,4]
<
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA-@1+256)%256,7))|(BIT((regA-@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((regA-@1+256)%256,7)
#b ccrZ:=((regA-@1+256)%256=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA-@1+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA-@1+256)%256,7))
>

//immediate
CMPB
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB
NO_BRANCH
@next
{}
[2,2]
<
#b ccrC:=(~BIT(regB,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regB-@1+256)%256,7))|(BIT((regB-@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((regB-@1+256)%256,7)
#b ccrZ:=((regB-@1+256)%256=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1,7)&~BIT((regB-@1+256)%256,7))|(~BIT(regB,7)&BIT(@1,7)&BIT((regB-@1+256)%256,7))
>

//extended
CMPB
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB @1
NO_BRANCH
@next
{}
[4,4]
<
#b ccrC:=(~BIT(regB,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regB-@1+256)%256,7))|(BIT((regB-@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((regB-@1+256)%256,7)
#b ccrZ:=((regB-@1+256)%256=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1,7)&~BIT((regB-@1+256)%256,7))|(~BIT(regB,7)&BIT(@1,7)&BIT((regB-@1+256)%256,7))
>

//extended
CMPB
@1+1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB @1_p_1
NO_BRANCH
@next
{}
[4,4]
<
#b ccrC:=(~BIT(regB,7)&BIT(@1_p_1,7))|(BIT(@1_p_1,7)&BIT((regB-@1_p_1+256)%256,7))|(BIT((regB-@1_p_1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((regB-@1_p_1+256)%256,7)
#b ccrZ:=((regB-@1_p_1+256)%256=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1_p_1,7)&~BIT((regB-@1_p_1+256)%256,7))|(~BIT(regB,7)&BIT(@1_p_1,7)&BIT((regB-@1_p_1+256)%256,7))
>

//immediate
CPD
#@1
#b ccrC ccrN ccrV ccrZ
#i regA regB
NO_BRANCH
@next
{}
[5,5]
<
#b ccrC:=(~BIT((regA*256)+regB,15)&BIT(@1,15))|(BIT(@1,15)&BIT(((regA*256)+regB-@1+65536)%65536,15))|(BIT(((regA*256)+regB-@1+65536)%65536,15)&~BIT((regA*256)+regB,15))
#b ccrN:=BIT(((regA*256)+regB-@1+65536)%65536,15)
#b ccrZ:=((((regA*256)+regB-@1+65536)%65536)=0)
#b ccrV:=(BIT((regA*256)+regB,15)&~BIT(@1,15)&~BIT(((regA*256)+regB-@1+65536)%65536,15))|(~BIT((regA*256)+regB,15)&BIT(@1,15)&BIT(((regA*256)+regB-@1+65536)%65536,15))
>

//extended
CPD
@1
#b ccrC ccrN ccrV ccrZ
#i regA regB @1 @1_p_1
NO_BRANCH
@next
{}
[7,7]
<
#b ccrC:=(~BIT((regA*256)+regB,15)&BIT(((@1*256)+@1_p_1),15))|(BIT(((@1*256)+@1_p_1),15)&BIT(((regA*256)+regB-((@1*256)+@1_p_1)+65536)%65536,15))|(BIT(((regA*256)+regB-((@1*256)+@1_p_1)+65536)%65536,15)&~BIT((regA*256)+regB,15))
#b ccrN:=BIT(((regA*256)+regB-((@1*256)+@1_p_1)+65536)%65536,15)
#b ccrZ:=((((regA*256)+regB-((@1*256)+@1_p_1)+65536)%65536)=0)
#b ccrV:=(BIT((regA*256)+regB,15)&~BIT(((@1*256)+@1_p_1),15)&~BIT(((regA*256)+regB-((@1*256)+@1_p_1)+65536)%65536,15))|(~BIT((regA*256)+regB,15)&BIT(((@1*256)+@1_p_1),15)&BIT(((regA*256)+regB-((@1*256)+@1_p_1)+65536)%65536,15))
>

//inherent
DES

#i regS
NO_BRANCH
@next
{}
[3,3]
<
regS:=(regS+65535)%65536
>

//inherent
DEX

#b ccrZ
#i regX
NO_BRANCH
@next
{}
[3,3]
<
regX:=(regX+65535)%65536
#b ccrZ:=((regX+65535)%65536=0)
>

//inherent
DEY

#b ccrZ
#i regY
NO_BRANCH
@next
{}
[4,4]
<
regY:=(regY+65535)%65536
#b ccrZ:=((regY+65535)%65536=0)
>


//inherent
INS

#i regS
NO_BRANCH
@next
{}
[3,3]
<
regS:=(regS+1)%65536
>

//inherent
INX

#b ccrZ
#i regX
NO_BRANCH
@next
{}
[3,3]
<
regX:=(regX+1)%65536
#b ccrZ:=((regX+1)%65536=0)
>

//inherent
INY

#b ccrZ
#i regY
NO_BRANCH
@next
{}
[4,4]
<
regY:=(regY+1)%65536
#b ccrZ:=((regY+1)%65536=0)
>

//inherent
SBA

#b ccrC ccrN ccrV ccrZ
#i regA regB
NO_BRANCH
@next
{}
[2,2]
<
regA:=(regA-regB+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(regB,7))|(BIT(regB,7)&BIT((regA-regB+256)%256,7))|(BIT((regA-regB+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((regA-regB+256)%256,7)
#b ccrZ:=(((regA-regB+256)%256)=0)
#b ccrV:=(BIT(regA,7)&~BIT(regB,7)&~BIT((regA-regB+256)%256,7))|(~BIT(regA,7)&BIT(regB,7)&BIT((regA-regB+256)%256,7))
>

//immediate
SUBA
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA 
NO_BRANCH
@next
{}
[2,2]
<
regA:=(regA-@1+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA-@1+256)%256,7))|(BIT((regA-@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((regA-@1+256)%256,7)
#b ccrZ:=((regA-@1+256)%256=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA-@1+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA-@1+256)%256,7))
>

//extended
SUBA
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA @1
NO_BRANCH
@next
{}
[4,4]
<
regA:=(regA-@1+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA-@1+256)%256,7))|(BIT((regA-@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT((regA-@1+256)%256,7)
#b ccrZ:=((regA-@1+256)%256=0)
#b ccrV:=(BIT(regA,7)&~BIT(@1,7)&~BIT((regA-@1+256)%256,7))|(~BIT(regA,7)&BIT(@1,7)&BIT((regA-@1+256)%256,7))
>

//immediate
SUBB
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB 
NO_BRANCH
@next
{}
[2,2]
<
regB:=(regB-@1+256)%256
#b ccrC:=(~BIT(regB,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regB-@1+256)%256,7))|(BIT((regB-@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((regB-@1+256)%256,7)
#b ccrZ:=((regB-@1+256)%256=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1,7)&~BIT((regB-@1+256)%256,7))|(~BIT(regB,7)&BIT(@1,7)&BIT((regB-@1+256)%256,7))
>

//extended
SUBB
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB @1
NO_BRANCH
@next
{}
[4,4]
<
regB:=(regB-@1+256)%256
#b ccrC:=(~BIT(regB,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regB-@1+256)%256,7))|(BIT((regB-@1+256)%256,7)&~BIT(regB,7))
#b ccrN:=BIT((regB-@1+256)%256,7)
#b ccrZ:=((regB-@1+256)%256=0)
#b ccrV:=(BIT(regB,7)&~BIT(@1,7)&~BIT((regB-@1+256)%256,7))|(~BIT(regB,7)&BIT(@1,7)&BIT((regB-@1+256)%256,7))
>

//extended
SUBD
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA regB @1 @1_p_1
NO_BRANCH
@next
{}
[4,4]
<
regB:=(regB-@1_p_1+256)%256
regA:=(regA-@1-((~BIT(regB,7)&BIT(@1_p_1,7))|(BIT(@1_p_1,7)&BIT((regB-@1_p_1+256)%256,7))|(BIT((regB-@1_p_1+256)%256,7)&~BIT(regB,7)))+256)%256
#b ccrC:=(~BIT(regA,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regA-@1+256)%256,7))|(BIT((regA-@1+256)%256,7)&~BIT(regA,7))
#b ccrN:=BIT(((regA*256)+regB-((@1*256)+@1_p_1)+256)%256,7)
#b ccrZ:=(((regA*256)+regB-((@1*256)+@1_p_1)+256)%256=0)
#b ccrV:=(BIT((regA*256)+regB,7)&~BIT((@1*256)+@1_p_1,7)&~BIT(((regA*256)+regB-((@1*256)+@1_p_1)+256)%256,7))|(~BIT((regA*256)+regB,7)&BIT((@1*256)+@1_p_1,7)&BIT(((regA*256)+regB-((@1*256)+@1_p_1)+256)%256,7))
>


////////////////////LOGICAL INSTRUCTIONS//////////////////////////

//immediate
ANDA
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA
NO_BRANCH
@next
{}
[2,2]
<
regA:=AND(regA,@1)
#b ccrN:=BIT(AND(regA,@1),7)
#b ccrZ:=(AND(@1,regA)=0)
#b ccrV:=false
>

//extended
ANDA
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regA @1
NO_BRANCH
@next
{}
[4,4]
<
regA:=AND(regA,@1)
#b ccrN:=BIT(AND(regA,@1),7)
#b ccrZ:=(AND(@1,regA)=0)
#b ccrV:=false
>

//immediate
ANDB
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB
NO_BRANCH
@next
{}
[2,2]
<
regB:=AND(regB,@1)
#b ccrN:=BIT(AND(regB,@1),7)
#b ccrZ:=(AND(@1,regB)=0)
#b ccrV:=false
>

//extended
ANDB
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regB @1
NO_BRANCH
@next
{}
[4,4]
<
regB:=AND(regB,@1)
#b ccrN:=BIT(AND(regB,@1),7)
#b ccrZ:=(AND(@1,regB)=0)
#b ccrV:=false
>

//direct
ORAA
#@1
#b ccrC ccrN ccrV ccrZ
#i regA
NO_BRANCH
@next
{}
[1,1]
<
regA:=OR(regA,@1)
#b ccrN:=BIT(OR(@1,regA),7)
#b ccrZ:=(or(@1,regA)=0)
#b ccrV:=false
>

//extended
ORAA
@1
#b ccrC ccrN ccrV ccrZ
#i regA @1
NO_BRANCH
@next
{}
[1,1]
<
regA:=OR(regA,@1)
#b ccrN:=BIT(OR(@1,regA),7)
#b ccrZ:=(or(@1,regA)=0)
#b ccrV:=false
>

//direct
ORAB
#@1
#b ccrC ccrN ccrV ccrZ
#i regB
NO_BRANCH
@next
{}
[1,1]
<
regB:=OR(regB,@1)
#b ccrN:=BIT(OR(@1,regB),7)
#b ccrZ:=(or(@1,regB)=0)
#b ccrV:=false
>

//extended
ORAB
@1
#b ccrC ccrN ccrV ccrZ
#i regB @1
NO_BRANCH
@next
{}
[1,1]
<
regB:=OR(regB,@1)
#b ccrN:=BIT(OR(@1,regB),7)
#b ccrZ:=(or(@1,regB)=0)
#b ccrV:=false
>

////////////////////MOVE INSTRUCTIONS//////////////////////////

//inherent
XGDX

#i regX regA regB
NO_BRANCH
@next
{}
[3,3]
<
regX:=regA*256+regB
regA:=and(regX,65280)/256
regB:=regX%256
>

//inherent
XGDY

#i regY regA regB
NO_BRANCH
@next
{}
[4,4]
<
regY:=regA*256+regB
regA:=and(regY,65280)/256
regB:=regY%256
>

//inherent
TSX

#i regX regSP 
NO_BRANCH
@next
{}
[3,3]
<
regX:=(regSP+1)%65536
>

////////////////////BRANCH INSTRUCTIONS//////////////////////////

BRA
@1
BRANCH
@1
{}
[3,3]
<
>

BSR
@1
#b @1_1
#i regSP
NO_BRANCH
@next
{}
[3,3]
<
regSP:=(regSP+65534)%65536
#b @1_1:=TRUE
>
{~@1_1}
[0,0]
<
>

BGE
@1
#b ccrN ccrV
BRANCH
@1
{((ccrN&~ccrV)|(~ccrN&ccrV))}
[3,3]
<
>
NO_BRANCH
@next
{((ccrN&ccrV)|(~ccrN&~ccrV))}
[1,1]
<
>

BLO
@1
#b ccrC 
BRANCH
@1
{(ccrC)}
[3,3]
<
>
NO_BRANCH
@next
{(~ccrC)}
[1,1]
<
>

BLS
@1
#b ccrC ccrV
BRANCH
@1
{(ccrC|ccrZ)}
[3,3]
<
>
NO_BRANCH
@next
{(~ccrC&~ccrZ)}
[1,1]
<
>

BPL
@1
#b ccrN 
BRANCH
@1
{~ccrN}
[3,3]
<
>
NO_BRANCH
@next
{ccrN}
[1,1]
<
>

BEQ
@1
#b ccrZ
BRANCH
@1
{ccrZ}
[3,3]
<
>
NO_BRANCH
@next
{~ccrZ}
[1,1]
<
>

BNE
@1
#b ccrZ
BRANCH
@1
{~ccrZ}
[3,3]
<
>
NO_BRANCH
@next
{ccrZ}
[1,1]
<
>

RTS
@1 
#i regSP
#b @1_1
BRANCH
@1_top
{}
[1,1]
<
regSP:=regSP+2
#b @1_1:=FALSE
>

////////////////////STACK INSTRUCTIONS//////////////////////////

//Stack Pointer Indexed
pshx

#b MEM_WRITE
#i regSP regX MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[3,3]
<
#b MEM_WRITE:=true
MEM_ADDR:=regSP
MEM_DATA:=regX%256
regSP:=(regSP+65535)%65536
>
{}
[1,1]
<
#b MEM_WRITE:=true
MEM_ADDR:=regSP
MEM_DATA:=AND(regX,65280)/256
//MEM_DATA:=regX/256
regSP:=(regSP+65535)%65536
>

//Stack Pointer Indexed
pulx

#b MEM_READ
#i regSP regX MEM_ADDR MEM_DATA
NO_BRANCH
@next
{}
[4,4]
<
#b MEM_READ:=true
MEM_ADDR:=(regSP+1)%65536
regSP:=(regSP+1)%65536
>
{~MEM_READ}
[0,0]
<
regX:=MEM_DATA*256
>
{}
[1,1]
<
#b MEM_READ:=true
MEM_ADDR:=(regSP+1)%65536
regSP:=(regSP+1)%65536
>
{~MEM_READ}
[0,0]
<
regX:=regX+MEM_DATA
>

////////////////////PSEUDO INSTRUCTIONS//////////////////////////
subroutine
@1
#b @1_1
NO_BRANCH
@next
{@1_1}
[0,0]
<
>

//pragma "set_pred"
set_pred
@1
#b @1
NO_BRANCH
@next
{}
[0,0]
<
#b @1:=TRUE
>

//pragma "clear_pred"
clear_pred
@1
#b @1
NO_BRANCH
@next
{}
[0,0]
<
#b @1:=FALSE
>

//pragma "pred"
pred
@1
#b @1
NO_BRANCH
@next
{@1}
[0,0]
<
>

