//6811.inst
//regD = regA:regB
//delimiters
#,+\t-\ []
//merge code
NO_TRANS

//direct
LDAB
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult 
#b adc_cd adc_cc adc_cb adc_ca
#i regD
NO_BRANCH
@next
{}
[3,3]
<
regD:=and(regD,65280)+(adc_ccf*128)+(adc_scan*32)+(adc_mult*16)+(adc_cd*8)+(adc_cc*4)+(adc_cb*2)+(adc_ca)
#b ccrN:=adc_ccf
#b ccrZ:=~adc_ccf&~adc_scan&~adc_mult&~adc_cd&~adc_cc&~adc_cb&~adc_ca
#b ccrV:=FALSE
>

//immediate
LDAB
#@1
@1 BOUND -128 255
#b ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
regD:=and(regD,65280)+(@1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//direct
LDAB
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ
#i regB @1 
NO_BRANCH
@next
{}
[3,3]
<
regB:=and(regD,65280)+(@1%256)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//immediate
LDD
#@1
#b ccrN ccrV ccrZ 
#i regD @1 
NO_BRANCH
@next
{}
[3,3]
<
regD:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDD
#-@1
#b ccrN ccrV ccrZ 
#i regD  
NO_BRANCH
@next
{}
[3,3]
<
regD:=(-@1%32768)
#b ccrN:=BIT(-@1,15)
#b ccrZ:=((-@1%32768)=0)
#b ccrV:=FALSE
>

//extended
LDD
@1
#b ccrN ccrV ccrZ 
#i regD @1 
NO_BRANCH
@next
{}
[3,3]
<
regD:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDX
#@1
#b ccrN ccrV ccrZ 
#i regX  
NO_BRANCH
@next
{}
[3,3]
<
regX:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//extended
LDX
@1
#b ccrN ccrV ccrZ 
#i regX @1 
NO_BRANCH
@next
{}
[3,3]
<
regX:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//immediate
LDY
#@1
#b ccrN ccrV ccrZ 
#i regY  
NO_BRANCH
@next
{}
[3,3]
<
regY:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//extended
LDY
@1
#b ccrN ccrV ccrZ 
#i regY @1 
NO_BRANCH
@next
{}
[3,3]
<
regY:=(@1%65536)
#b ccrN:=BIT(@1,15)
#b ccrZ:=((@1%65536)=0)
#b ccrV:=FALSE
>

//direct
LDAA
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ
#i regD @1 
NO_BRANCH
@next
{}
[3,3]
<
regD:=(@1%256)*256+and(regD,255)
#b ccrN:=BIT(@1,7)
#b ccrZ:=((@1%256)=0)
#b ccrV:=FALSE
>

//direct
STAB
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult adc_start
#b adc_cd adc_cc adc_cb adc_ca
#i regD
NO_BRANCH
@next
{}
[3,3]
<
#b adc_ccf:=false
#b adc_scan:=BIT(regD,5)
#b adc_mult:=BIT(regD,4)
#b adc_cd:=BIT(regD,3)
#b adc_cc:=BIT(regD,2)
#b adc_cb:=BIT(regD,1)
#b adc_ca:=BIT(regD,0)
#b ccrN:=BIT(regD,7)
#b ccrZ:=(and(regD,255)=0)
#b ccrV:=FALSE
#b adc_start:=true
>

//direct
STAA
ADCTL
#b ccrN ccrV ccrZ adc_ccf adc_scan adc_mult adc_start
#b adc_cd adc_cc adc_cb adc_ca
#i regD
NO_BRANCH
@next
{}
[3,3]
<
#b adc_ccf:=false
#b adc_scan:=BIT(regD,13)
#b adc_mult:=BIT(regD,12)
#b adc_cd:=BIT(regD,11)
#b adc_cc:=BIT(regD,10)
#b adc_cb:=BIT(regD,9)
#b adc_ca:=BIT(regD,8)
#b ccrN:=BIT(regD,15)
#b ccrZ:=((regD/256)=0)
#b ccrV:=FALSE
#b adc_start:=true
>

STAB
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ 
#i regD @1 
NO_BRANCH
@next
{}
[3,3]
<
@1:=and(regD,255)
#b ccrN:=BIT(regD,7)
#b ccrZ:=(and(regD,255)=0)
#b ccrV:=FALSE
>

staa
@1
@1 BOUND 0 255
#b ccrN ccrV ccrZ 
#i regD @1 
NO_BRANCH
@next
{}
[3,3]
<
@1:=(regD/256)
#b ccrN:=BIT(regD,15)
#b ccrZ:=((regD/256)=0)
#b ccrV:=FALSE
>

std
@1
#b ccrN ccrV ccrZ 
#i regD @1 
NO_BRANCH
@next
{}
[5,5]
<
@1:=regD
#b ccrN:=BIT(regD,15)
#b ccrZ:=(regD=0)
#b ccrV:=FALSE
>

STX
@1
#b ccrN ccrV ccrZ 
#i regX @1 
NO_BRANCH
@next
{}
[5,5]
<
@1:=regX
#b ccrN:=BIT(regX,15)
#b ccrZ:=(regX=0)
#b ccrV:=FALSE
>

//immediate
ADDD
#@1
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[4,4]
<
regD:=(regD+@1+65536)%65536
#b ccrC:=(~BIT(regD,15)&BIT(@1,15))|(BIT(@1,15)&BIT((regD+@1+65536)%65536,15))|(BIT((regD+@1+65536)%65536,15)&~BIT(regD,15))
#b ccrN:=BIT((regD+@1+65536)%65536,15)
#b ccrZ:=((@1+regD)=0)
#b ccrV:=(BIT(regD,15)&~BIT(@1,15)&~BIT((regD+@1+65536)%65536,15))|(~BIT(regD,15)&BIT(@1,15)&BIT((regD+@1+65536)%65536,15))
>

//direct
ADDD
@1
#b ccrC ccrN ccrV ccrZ
#i regD @1
NO_BRANCH
@next
{}
[4,4]
<
regD:=(regD+@1+65536)%65536
#b ccrC:=(~BIT(regD,15)&BIT(@1,15))|(BIT(@1,15)&BIT((regD+@1+65536)%65536,15))|(BIT((regD+@1+65536)%65536,15)&~BIT(regD,15))
#b ccrN:=BIT((regD+@1+65536)%65536,15)
#b ccrZ:=((@1+regD)=0)
#b ccrV:=(BIT(regD,15)&~BIT(@1,15)&~BIT((regD+@1+65536)%65536,15))|(~BIT(regD,15)&BIT(@1,15)&BIT((regD+@1+65536)%65536,15))
>

//immediate
ADDA
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
regD:=((regD/256+@1+256)%256)*256+and(regD,255)
#b ccrC:=(~BIT(regD/256,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regD/256+@1+256)%256,7))|(BIT((regD/256+@1+256)%256,7)&~BIT(regD/256,7))
#b ccrN:=BIT(@1+regD/256,7)
#b ccrZ:=((@1+regD/256)=0)
#b ccrV:=(BIT(regD/256,7)&~BIT(@1,7)&~BIT((regD/256+@1+256)%256,7))|(~BIT(regD/256,7)&BIT(@1,7)&BIT((regD/256+@1+256)%256,7))
>

//immediate
ADDB
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
regD:=and(regD,65280)+(and(regD,255)+@1+256)%256
#b ccrC:=(~BIT(and(regD,255),7)&BIT(@1,7))|(BIT(@1,7)&BIT((and(regD,255)+@1+256)%256,7))|(BIT((and(regD,255)+@1+256)%256,7)&~BIT(and(regD,255),7))
#b ccrN:=BIT(and(regD,255)+@1+256,7)
#b ccrZ:=((and(regD,255)+@1+256)%256=0)
#b ccrV:=(BIT(and(regD,255),7)&~BIT(@1,7)&~BIT((and(regD,255)+@1+256)%256,7))|(~BIT(and(regD,255),7)&BIT(@1,7)&BIT((and(regD,255)+@1+256)%256,7))
>


//direct
SUBB
@1
@1 BOUND 0 255
#b ccrC ccrN ccrV ccrZ
#i regD @1
NO_BRANCH
@next
{}
[3,3]
<
regD:=and(regD,65280)+(and(regD,255)-@1+256)%256
#b ccrC:=(~BIT(and(regD,255),7)&BIT(@1,7))|(BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))|(BIT((and(regD,255)-@1+256)%256,7)&~BIT(and(regD,255),7))
#b ccrN:=BIT((and(regD,255)-@1+256)%256,7)
#b ccrZ:=(((and(regD,255)-@1+256)%256)=0)
#b ccrV:=(BIT(and(regD,255),7)&~BIT(@1,7)&~BIT((and(regD,255)-@1+256)%256,7))|(~BIT(and(regD,255),7)&BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))
>

//immediate
SUBB
#@1
@1 BOUND 0 255
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
regD:=and(regD,65280)+((and(regD,255)-@1+256)%256)
#b ccrC:=(~BIT(and(regD,255),7)&BIT(@1,7))|(BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))|(BIT((and(regD,255)-@1+256)%256,7)&~BIT(and(regD,255),7))
#b ccrN:=BIT((and(regD,255)-@1+256)%256,7)
#b ccrZ:=(((and(regD,255)-@1+256)%256)=0)
#b ccrV:=(BIT(and(regD,255),7)&~BIT(@1,7)&~BIT((and(regD,255)-@1+256)%256,7))|(~BIT(and(regD,255),7)&BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))
>

//inherent
DEY

#b ccrZ
#i regY
NO_BRANCH
@next
{}
[4,4]
<
regY:=(regY+65535)%65536
#b ccrZ:=((regY+65535)%65536=0)
>

//inherent
SBA

#b ccrC ccrN ccrV ccrZ
#i regD 
NO_BRANCH
@next
{}
[2,2]
<
regD:=(regD/256-and(regD,255)+256)%256*256+and(regD,255)
#b ccrC:=(~BIT(regD/256,7)&BIT(and(regD,255),7))|(BIT(and(regD,255),7)&BIT((regD/256-and(regD,255)+256)%256,7))|(BIT((regD/256-and(regD,255)+256)%256,7)&~BIT(regD/256,7))
#b ccrN:=BIT((regD/256-and(regD,255)+256)%256,7)
#b ccrZ:=(((regD/256-and(regD,255)+256)%256)=0)
#b ccrV:=(BIT(regD/256,7)&~BIT(and(regD,255),7)&~BIT((regD/256-and(regD,255)+256)%256,7))|(~BIT(regD/256,7)&BIT(and(regD,255),7)&BIT((regD/256-and(regD,255)+256)%256,7))
>



//immediate
andb
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
regD:=and(regD,65280)+and(and(regD,255),@1)
#b ccrN:=BIT(and(and(regD,255),@1),7)
#b ccrZ:=(and(@1,and(regD,255))=0)
#b ccrV:=false
>

//direct
orab
@1
#b ccrC ccrN ccrV ccrZ
#i regD @1
NO_BRANCH
@next
{}
[1,1]
<
regD:=and(regD,65280)+or(and(regD,255),@1)
#b ccrN:=BIT(or(@1,and(regD,255))7)
#b ccrZ:=(or(@1,and(regD,255))=0)
#b ccrV:=false
>


//immediate
cmpa
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
#b ccrC:=(~BIT(regD/256,7)&BIT(@1,7))|(BIT(@1,7)&BIT((regD/256-@1+256)%256,7))|(BIT((regD/256-@1+256)%256,7)&~BIT(regD/256,7))
#b ccrN:=BIT((egD/256-@1+256)%256,7)
#b ccrZ:=((regD/256-@1+256)%256=0)
#b ccrV:=(BIT(regD/256,7)&~BIT(@1,7)&~BIT((regD/256-@1+256)%256,7))|(~BIT(regD/256,7)&BIT(@1,7)&BIT((regD/256-@1+256)%256,7))
>

//immediate
cmpb
#@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regD
NO_BRANCH
@next
{}
[1,1]
<
#b ccrC:=(~BIT(and(regD,255),7)&BIT(@1,7))|(BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))|(BIT((and(regD,255)-@1+256)%256,7)&~BIT(and(regD,255),7))
#b ccrN:=BIT((and(regD,255)-@1+256)%256,7)
#b ccrZ:=(((and(regD,255)-@1+256)%256)=0)
#b ccrV:=(BIT(and(regD,255),7)&~BIT(@1,7)&~BIT((and(regD,255)-@1+256)%256,7))|(~BIT(and(regD,255),7)&BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))
>

//direct
cmpb
@1
@1 BOUND -128 255
#b ccrC ccrN ccrV ccrZ
#i regD @1
NO_BRANCH
@next
{}
[1,1]
<
#b ccrC:=(~BIT(and(regD,255),7)&BIT(@1,7))|(BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))|(BIT((and(regD,255)-@1+256)%256,7)&~BIT(and(regD,255),7))
#b ccrN:=BIT((and(regD,255)-@1+256)%256,7)
#b ccrZ:=(((and(regD,255)-@1+256)%256)=0)
#b ccrV:=(BIT(and(regD,255),7)&~BIT(@1,7)&~BIT((and(regD,255)-@1+256)%256,7))|(~BIT(and(regD,255),7)&BIT(@1,7)&BIT((and(regD,255)-@1+256)%256,7))
>

//direct
cpd
@1
#b ccrC ccrN ccrV ccrZ
#i regD @1
NO_BRANCH
@next
{}
[1,1]
<
#b ccrC:=(~BIT(regD,15)&BIT(@1,15))|(BIT(@1,15)&BIT((regD-@1+65536)%65536,15))|(BIT((regD-@1+65536)%65536,15)&~BIT(regD,15))
#b ccrN:=BIT((regD-@1+65536)%65536,15)
#b ccrZ:=(((regD-@1+65536)%65536)=0)
#b ccrV:=(BIT(regD,15)&~BIT(@1,15)&~BIT((regD-@1+65536)%65536,15))|(~BIT(regD,15)&BIT(@1,15)&BIT((regD-@1+65536)%65536,15))
>

BRA
@1
BRANCH
@1
{}
[3,3]
<
>

BSR
@1
#b @1_1
NO_BRANCH
@next
{}
[3,3]
<
#b @1_1:=TRUE
>
{~@1_1}
[0,0]
<
>

BGE
@1
#b ccrN ccrV
BRANCH
@1
{((ccrN&~ccrV)|(~ccrN&ccrV))}
[3,3]
<
>
NO_BRANCH
@next
{((ccrN&ccrV)|(~ccrN&~ccrV))}
[1,1]
<
>

BLO
@1
#b ccrC 
BRANCH
@1
{(ccrC)}
[3,3]
<
>
NO_BRANCH
@next
{(~ccrC)}
[1,1]
<
>

BLS
@1
#b ccrC ccrV
BRANCH
@1
{(ccrC|ccrZ)}
[3,3]
<
>
NO_BRANCH
@next
{(~ccrC&~ccrZ)}
[1,1]
<
>

BPL
@1
#b ccrN 
BRANCH
@1
{~ccrN}
[3,3]
<
>
NO_BRANCH
@next
{ccrN}
[1,1]
<
>

BEQ
@1
#b ccrZ
BRANCH
@1
{ccrZ}
[3,3]
<
>
NO_BRANCH
@next
{~ccrZ}
[1,1]
<
>

BNE
@1
#b ccrZ
BRANCH
@1
{~ccrZ}
[3,3]
<
>
NO_BRANCH
@next
{ccrZ}
[1,1]
<
>

//pragma "set_pred"
set_pred
@1
#b @1
NO_BRANCH
@next
{}
[0,0]
<
#b @1:=TRUE
>

//pragma "clear_pred"
clear_pred
@1
#b @1
NO_BRANCH
@next
{}
[0,0]
<
#b @1:=FALSE
>

//pragma "pred"
pred
@1
#b @1
NO_BRANCH
@next
{@1}
[0,0]
<
>

RTS
@1 
#b @1_1
BRANCH
@1_top
{}
[1,1]
<
#b @1_1:=FALSE
>

//THIS IS A STUB!!  NO ACTUAL STORAGE OCCURS
pshx

#i regSP
NO_BRANCH
@next
{}
[4,4]
<
regSP:=(regSP+65534)%65536
>

//THIS IS A STUB!!  NO ACTUAL STORAGE OCCURS
pulx

#i regSP
NO_BRANCH
@next
{}
[4,4]
<
regSP:=(regSP+2)%65536
>



subroutine
@1
#b @1_1
NO_BRANCH
@next
{@1_1}
[0,0]
<
>

CLR
@1
#i @1
NO_BRANCH
@next
{}
[6,6]
<
@1:=0
>